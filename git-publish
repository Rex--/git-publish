#!/bin/sh
# git-publish
# 2022 Rex McKinnon <0xff@rexploits.com>

# Setup defaults
DEFAULT_REMOTE=origin
DEFAULT_GIT_BRANCH="$(git config --get init.defaultBranch)"
DEFAULT_BRANCH="${DEFAULT_GIT_BRANCH:-master}"
DEFAULT_FILES="-A"
DEFAULT_MESSAGE="Publish Version"
DEFAULT_VERSION=0

# Check for subcomands.
ACTION=PUBLISH
case "$1" in
    init) ACTION=INIT; shift ;;
    worktree) ACTION=WORKTREE; shift ;;
esac

# Parse flag options
while getopts "r:b:m:d" flag
do
    case $flag in
        d) FLAG_DELETE=0 ;;
        r) PUBLISH_REMOTE=$OPTARG ;;
        b) PUBLISH_BRANCH=$OPTARG ;;
        m) PUBLISH_MESSAGE=$OPTARG ;;
        ?) exit 1 ;;
    esac
done

# Shift out flags, leaving us with positional arguments
while [ "$OPTIND" -gt 1 ]; do
    shift
    OPTIND="$(( OPTIND - 1 ))"
done

# Take ACTION
case $ACTION in

    # Publish repo to remote directory
    PUBLISH)
        # Get list of files passed in
        if [ -z "$1" ]; then
            PUBLISH_FILES="$DEFAULT_FILES"
            echo "Publishing repository:" "$(pwd)"
        else
            PUBLISH_FILES=$*
            echo "Publishing files:" "$PUBLISH_FILES"
        fi

        # Create our commit message
        if [ -z "$PUBLISH_MESSAGE" ]; then
            # Get the last commit messsage
            GIT_MESSAGE="$(git log --pretty=format:"%s" -1)"
            # Check if the last commit message is empty
            if [ -z "$GIT_MESSAGE" ]; then
                # Set a default message
                echo "Using default commit message:" "$DEFAULT_MESSAGE"
                PUBLISH_MESSAGE=$DEFAULT_MESSAGE
                # Set a default version
                echo "Using default version:" "$DEFAULT_VERSION"
                PUBLISH_VERSION=$DEFAULT_VERSION
            else
                # Use the last commit message if it's not empty
                echo "Using last commit message:" "$GIT_MESSAGE"
                PUBLISH_MESSAGE=$GIT_MESSAGE
            fi
        fi

        # Check if publish version is empty
        if [ -z "$PUBLISH_VERSION" ]; then
            # Extract version from message. Should be the last word with no period
            VERSION_CURRENT="$(echo "$PUBLISH_MESSAGE" | rev | cut -d " " -f1 | rev)"
            # Verify that its a number
            if [ -n "$VERSION_CURRENT" ] && [ "$VERSION_CURRENT" -eq "$VERSION_CURRENT" ] 2>/dev/null; then
                # Strip old number from commit message
                PUBLISH_MESSAGE="$(echo "$PUBLISH_MESSAGE" | rev | cut -d " " --fields=2- | rev)"

                if [ -n "$GIT_MESSAGE" ]; then
                    # Increment the version if we got it from the last commit
                    echo "Incrementing commit version: $VERSION_CURRENT + 1"
                    PUBLISH_VERSION="$(echo "$VERSION_CURRENT + 1" | bc)"
                else
                    # Use the version as-is if passed in as argument
                    echo "Found message version:" "$VERSION_CURRENT"
                    PUBLISH_VERSION=$VERSION_CURRENT
                fi
            else
                # Not a number, check if we have one in the last commit message
                unset VERSION_CURRENT
                GIT_VERSION="$(git log --pretty=format:%s -1 | rev | cut -d " " -f1 | rev)"
                if [ -n "$GIT_VERSION" ] && [ "$GIT_VERSION" -eq "$GIT_VERSION" ] 2>/dev/null; then
                    echo "Incrementing commit version: $GIT_VERSION + 1"
                    PUBLISH_VERSION="$(echo "$GIT_VERSION + 1" | bc)"
                else
                    # GIT_VERSION is not a number, use default
                    unset GIT_VERSION
                    echo "Using default version:" "$DEFAULT_VERSION"
                    PUBLISH_VERSION=$DEFAULT_VERSION
                fi
            fi
        fi

        # Append next version number
        PUBLISH_MESSAGE="$PUBLISH_MESSAGE $PUBLISH_VERSION"

        # Add, Commit, and Push
        git add "$PUBLISH_FILES"
        git commit -m "$PUBLISH_MESSAGE"
        git push "${PUBLISH_REMOTE:-$DEFAULT_REMOTE}" "${PUBLISH_BRANCH:-$DEFAULT_BRANCH}"
        echo "Published Version: $PUBLISH_VERSION"
    ;;

    INIT)
        PUBLISH_URL="$1"
        # Split the argument into ssh uri && file path
        PUBLISH_SERVER="$(echo "$PUBLISH_URL" | rev | cut -d: -f2- | rev)"
        PUBLISH_REPO="$(echo "$PUBLISH_URL" | rev | cut -s -d: -f1 | rev)"
        # check if valid argument
        if [ -z "$PUBLISH_REPO" ]; then
            echo "Invalid git url: $1 (Missing ':')"
            exit 1
        fi
        echo "Connecting to server: $PUBLISH_SERVER"
        echo "Repo: $PUBLISH_REPO"

# This is the contents of the post-receive hook that gets installed with
# every init directory. It just finds all .publish scripts and runs them.
PUBLISH_HOOK="\
#!/bin/sh
# This file was auto-generated by git-publish.
#    <github.com/rex--/git-publish>
# GO AHEAD AND MODIFY -- IT'S PROBABALY BROKEN ANYWAYS!

find -name \\\"*.publish\\\" -exec sh \\\"{}\\\" \\\";\\\""

        PUBLISH_HOOK_PATH="$PUBLISH_REPO/hooks/post-receive"
        # ssh to server and run git init command
        ssh "$PUBLISH_SERVER" \
            "git init --bare --initial-branch=${PUBLISH_BRANCH:=$DEFAULT_BRANCH} $PUBLISH_REPO;" \
            "echo -e \"$PUBLISH_HOOK\" > $PUBLISH_HOOK_PATH;" \
            "chmod +x $PUBLISH_HOOK_PATH"
        # echo "Creating branch: $PUBLISH_BRANCH"
        echo "Find this repo at: $PUBLISH_URL"

        if [ "$2" ]; then
            PUBLISH_LOCAL=$2
        else
            PUBLISH_LOCAL="$(basename "$PUBLISH_REPO" ".git")"
        fi
        echo "Cloning into local directory: $PUBLISH_LOCAL/"
        # Create local repo and link it to the remote
        git init --initial-branch="$PUBLISH_BRANCH" "$PUBLISH_LOCAL"
        git --git-dir="$PUBLISH_LOCAL/.git" remote add "${PUBLISH_REMOTE:=$DEFAULT_REMOTE}" "$PUBLISH_URL"
        # git clone --origin "${PUBLISH_REMOTE:=$DEFAULT_REMOTE}" "$PUBLISH_URL" "$PUBLISH_LOCAL"
        # git --git-dir="$PUBLISH_LOCAL/.git" checkout --quiet -b "$PUBLISH_BRANCH"
    ;;

    WORKTREE)
        PUBLISH_WORKTREE="$1"; shift;

# This is a template for the post-receive server hook that gets created for
# each published worktree.
WORKTREE_HOOK="\
#!/bin/sh
# This file was auto-generated by git-publish.
#    <github.com/rex--/git-publish>
# GO AHEAD AND MODIFY -- IT'S PROBABALY BROKEN ANYWAYS!

WORKTREE=\\\"$PUBLISH_WORKTREE\\\"
BRANCH=\\\"\\\${BRANCH:-${PUBLISH_BRANCH:-$DEFAULT_BRANCH}}\\\"
echo \\\"Updating worktree: \\\$WORKTREE\\\"
git --work-tree=\\\$WORKTREE \\\\
    checkout --force --detach --ignore-other-worktrees \\\\
    \\\"\\\$BRANCH\\\""

        # Get url for publish server (default: origin)
        PUBLISH_REMOTE="${PUBLISH_REMOTE:-$DEFAULT_REMOTE}"
        PUBLISH_SERVER="$(git remote get-url "$PUBLISH_REMOTE")"
        GIT_ERROR=$?
        if [ "$GIT_ERROR" -ne 0 ]; then
            exit 1  # error: No such remote '$PUBLISH_REMOTE'
        else
            echo "Using remote '$PUBLISH_REMOTE' @ $PUBLISH_SERVER"
        fi
        # split our server link into ssh uri && file path
        PUBLISH_REPO="$(echo "$PUBLISH_SERVER" | rev | cut -d: -f1 | rev)"
        PUBLISH_SERVER="$(echo "$PUBLISH_SERVER" | rev | cut -d: -f2- | rev)"
        
        # Create a unique name for our hook script
        NOPREFIX="-"
        # This abomination: ${PUBLISH_WORKTREE////-} replaces all '/' characters with '-'
        # It's also undefined in POSIX sh, so maybe we should to another method.
        # I think ${WORKTREE_HOOK_NAME#"$NOPREFIX"} is also a bashism.
        WORKTREE_HOOK_NAME="${PUBLISH_WORKTREE////-}"
        WORKTREE_HOOK_NAME="${WORKTREE_HOOK_NAME#"$NOPREFIX"}"
        WORKTREE_HOOK_PATH="$PUBLISH_REPO/hooks/$WORKTREE_HOOK_NAME.publish"

        # Determine command to run
        if [ -n "$FLAG_DELETE" ]; then
            echo "Deleting publish worktree: $PUBLISH_WORKTREE"
            # ssh to server and run commands to remove linked worktree
            ssh "$PUBLISH_SERVER" \
                "git --git-dir=$PUBLISH_REPO worktree remove --force $PUBLISH_WORKTREE;" \
                "rm $WORKTREE_HOOK_PATH"
            # Check for and handle error
            SSH_ERROR=$?
            if [ "$SSH_ERROR" -ne 0 ]; then
                echo "Failed to delete worktree: $PUBLISH_WORKTREE"
                exit 1
            else
                echo "Successfully deleted worktree: $PUBLISH_WORKTREE"
            fi
        else
            echo "Creating publish worktree: $PUBLISH_WORKTREE"
            # ssh to server and run command to create linked worktree
            # And add git hook to remote
            ssh "$PUBLISH_SERVER" \
                "git --git-dir=$PUBLISH_REPO worktree add --force --detach $PUBLISH_WORKTREE ${PUBLISH_BRANCH:-$DEFAULT_BRANCH};" \
                "echo \"$WORKTREE_HOOK\" > $WORKTREE_HOOK_PATH;" \
                "chmod +x $WORKTREE_HOOK_PATH"
            # Check for and handle error
            SSH_ERROR=$?
            if [ "$SSH_ERROR" -ne 0 ]; then
                echo "Failed to create worktree: $PUBLISH_WORKTREE"
                exit 1
            else
                echo "Successfully created worktree: $PUBLISH_WORKTREE"
            fi
        fi
    ;;
esac
